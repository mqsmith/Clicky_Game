{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Title","score","highScore","App","state","friends","clickedFriendsIds","message","cardClass","checkHighScore","alert","setState","includes","push","length","i","j","Math","floor","random","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s+CAmBeA,MAhBf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBACEC,IAAKF,EAAMG,KACXC,IAAKJ,EAAMK,MACXC,GAAIN,EAAMM,GACVC,QAAS,kBAAMP,EAAMQ,iBAAiBR,EAAMM,KAC5CL,UAAWD,EAAMC,eCPZQ,G,MAFC,SAAAT,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMU,YCW1CC,G,MAXD,SAAAX,GAAK,OACjB,yBAAKC,UAAU,SACZD,EAAMU,SACP,yBAAKT,UAAU,UACb,sCACUD,EAAMY,MADhB,eACmCZ,EAAMa,e,OCkFhCC,E,2MAlFbC,MAAQ,CACNC,UACAC,kBAAmB,GACnBL,MAAO,EACPC,UAAW,EACXK,QAAS,GACTC,UAAW,U,EAIbC,eAAiB,WACZ,EAAKL,MAAMH,MAAQ,EAAKG,MAAMF,WACjCQ,MAAM,mBACN,EAAKC,SAAS,CAACT,UAAU,EAAKE,MAAMH,S,EAGtCJ,iBAAmB,SAAAF,GACjB,IAAIW,EAAoB,EAAKF,MAAME,kBAEnC,GAAIA,EAAkBM,SAASjB,GAQ7B,OAPA,EAAKc,sBACL,EAAKE,SAAS,CACZL,kBAAmB,GACnBC,QAAS,oEACTN,MAAO,EACPO,UAAW,aAMb,GAFAF,EAAkBO,KAAKlB,GAEU,KAA7BW,EAAkBQ,OAMpB,OALA,EAAKL,sBACL,EAAKE,SAAS,CACZJ,QAAS,yCACTD,kBAAmB,KAKvB,EAAKK,SAAS,CACZN,UACAC,oBACAL,MAAOK,EAAkBQ,OAEzBP,QAAS,KAGX,IAAK,IAAIQ,EAAIV,EAAQS,OAAS,EAAGC,EAAI,EAAGA,IAAK,CAC3C,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADG,EAEhB,CAACV,EAAQW,GAAIX,EAAQU,IAA/CV,EAAQU,GAFkC,KAE9BV,EAAQW,GAFsB,O,wEAMvC,IAAD,OACDT,EAAUa,KAAKhB,MAAMG,QAE3B,OACE,oCAEE,kBAAC,EAAD,CAAON,MAAOmB,KAAKhB,MAAMH,MAAOC,UAAWkB,KAAKhB,MAAMF,WAAtD,2BAEGK,EAAW,2BAAIa,KAAKhB,MAAMG,SAAc,MAE3C,kBAAC,EAAD,KACCa,KAAKhB,MAAMC,QAAQgB,KAAI,SAAAhB,GAAO,OAC7B,kBAAC,EAAD,CACER,iBAAkB,EAAKA,iBACvBF,GAAIU,EAAQV,GACZ2B,IAAKjB,EAAQV,GACbD,MAAOW,EAAQX,MACfF,KAAMa,EAAQb,KACdF,UAAW,EAAKc,MAAMI,qB,GA1EhBe,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.849e1c01.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img\n          alt={props.name}\n          src={props.image}\n          id={props.id}\n          onClick={() => props.shuffleScoreCard(props.id)}\n          className={props.className}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nconst Title = props => (\n  <div className=\"title\">\n    {props.children}\n    <div className=\"scores\">\n      <h3>\n        Score: {props.score} HighScore: {props.highScore}\n      </h3>\n    </div>\n  </div>\n);\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    clickedFriendsIds: [],\n    score: 0,\n    highScore: 0,\n    message: \"\",\n    cardClass: \"gameOn\"\n  };\n\n  \n  checkHighScore = () => {\n    if(this.state.score > this.state.highScore)\n    alert(\"New High Score!\")\n    this.setState({highScore:this.state.score});\n  };\n\n  shuffleScoreCard = id => {\n    let clickedFriendsIds = this.state.clickedFriendsIds;\n\n    if (clickedFriendsIds.includes(id)) {\n      this.checkHighScore();\n      this.setState({\n        clickedFriendsIds: [],\n        message: \"Game Over! Click on any of the images to try your luck again!!!!!\",\n        score: 0,\n        cardClass: \"gameOver\"\n      });\n      return;\n    } else {\n      clickedFriendsIds.push(id);\n\n      if (clickedFriendsIds.length === 10) {\n        this.checkHighScore();\n        this.setState({\n          message: \"You Won! Awesome, Click to play again!\",\n          clickedFriendsIds: []\n        });\n        return;\n      }\n\n      this.setState({\n        friends,\n        clickedFriendsIds,\n        score: clickedFriendsIds.length,\n        // highScore: clickedFriendsIds.length,\n        message: \"\"\n      });\n\n      for (let i = friends.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [friends[i], friends[j]] = [friends[j], friends[i]];\n      }\n    }\n  };\n  render() {\n    const message = this.state.message;\n\n    return (\n      <>\n      \n        <Title score={this.state.score} highScore={this.state.highScore}>\n          College Football Pick'em\n          {message ? (<p>{this.state.message}</p>):null}\n        </Title>\n        <Wrapper>\n        {this.state.friends.map(friends => (\n          <FriendCard\n            shuffleScoreCard={this.shuffleScoreCard}\n            id={friends.id}\n            key={friends.id}\n            image={friends.image}\n            name={friends.name}\n            className={this.state.cardClass}\n          />\n        ))}\n        </Wrapper>\n       \n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}